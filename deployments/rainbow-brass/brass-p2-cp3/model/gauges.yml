gauge-types:
#  InstructionGraphProgressGaugeT:
#    commands:
#      current-instruction: "IG.setExecutingInstruction(String,String)"
#      current-failed: "IG.setExecutionFailed(String)"
#      new-ig: "IG.setInstructions(String)"
#    setupParams:
#      targetIP:
#        type: String
#        default: "localhost"
#      beaconPeriod:
#        type: long
#        default: 30000
#      javaClass:
#        type: String
#        default: "org.sa.rainbow.brass.gauges.InstructionGraphGauge"
#    configParams:
#      targetProbeType:
#        type: String
#        default: ~
#
#  MissionStateGaugeT:
#    commands:
#      location: "MS.setCurrentLocation(double,double,double)"
#      charge: "MS.setBatteryCharge(double)"
#      deadline: "MS.setDeadline(long)"
#      clock: "MS.setCurrentTime(double)"
#    setupParams:
#      targetIP:
#        type: String
#        default: "localhost"
#      beaconPeriod:
#        type: long
#        default: 30000
#      javaClass:
#        type: String
#        default: "org.sa.rainbow.brass.gauges.MissionStateGauge"
#    configParams:
#      targetProbeType:
#        type: String
#        default: ~
        
  RobotStateGaugeT:
    commands:
      speed: "RS.setSpeed(double)"
      charge: "RS.setBatteryCharge(double)"
      bump: "RS.setBumped(boolean)"
      sensor: "RS.setSensor(String, boolean)"
      lighting: "RS.setLighting(double)"
    setupParams:
      targetIP:
        type: String
        default: "localhost"
      beaconPeriod:
        type: long
        default: 30000
      javaClass:
        type: String
        default: "org.sa.rainbow.brass.gauges.p2_cp3.RobotStateGauge"
    configParams:
      targetProbeType:
        type: String
        default: ~     
        
  ClockGaugeT:
    commands:
      clock: "C.setCurrentTime(double)"
    setupParams:
      targetIP:
        type: String
        default: "localhost"
      beaconPeriod:
        type: long
        default: 30000
      javaClass:
        type: String
        default: "org.sa.rainbow.brass.gauges.p2_cp3.ClockGauge"
    configParams:
      targetProbeType:
        type: String
        default: ~
      
  ArchEnablementGaugeT:
    commands: 
      set-active: "C.setAcive(String)"
    setupParams:
      targetIP:
        type: String
        default: "localhost"
      beaconPeriod:
        type: long
        default: 30000
      javaClass:
        type: String
        default: "org.sa.rainbow.brass.gauges.p2_cp3.ArchitectureGauge"
      mappings:
        type: String
        default: ~
    configParams:
      targetProbeType:
        type: String
        default: ~
    
        
#  BRASSTargetWaypointGaugeT:
#    commands:
#      target: "MS.setTargetWaypoint(String)"
#    setupParams:
#      targetIP:
#        type: String
#        default: "localhost"
#      beaconPeriod:
#        type: long
#        default: 30000
#      javaClass:
#        type: String
#        default: "org.sa.rainbow.brass.gauges.TargetWaypointGauge"
#    configParams:
#      targetProbeType:
#        type: String
#        default: ~
        

gauge-instances:
#  IGG1:
#    type: InstructionGraphProgressGaugeT
#    model: "ExecutingInstructionGraph:InstructionGraphProgress"
#    commands:
#      current-instruction: "cig.setExecutingInstruction($<node>,$<state>)"
#      current-failed: "cig.setExecutionFailed($<node>)"
#      new-ig: "igs.setInstructions($<ig>)"
#    setupValues:
#      targetIP: "${customize.system.target.master}"
#    configValues:
#      reportingPeriod: 1000
#      targetProbeType: rostopicprobe
  
  RSG1:
    type: RobotStateGaugeT
    model: Robot:RobotState
    commands:
      speed: "rs.setSpeed($<s>)"
      charge: "rs.setCharge($<c>)"
      sensor: "rs.setSensor($<s>,$<v>)"
      bump: "rs.setBumped($<b>)"
      lighting: "rs.setLighting($<l>)"
    setupValues:
      targetIP: "${customize.system.target.master}"
    configValues:
      reportingPeriod: 1000
      targetProbeType: rostopicprobe

  Clock1:
    type: ClockGaugeT
    model: Clock:Clock
    commands:
      clock: "c.setCurrentTime($<c>)"
    setupValues:
      targetIP: "${customize.system.target.master}"
    configValues:
      reportingPeriod: 1000
      targetProbeType: rostopicprobe

  TurtlebotArchitectureGauge:
    type: ArchitectureGaugeT
    model: Turtlebot:Acme
    commands:
      activeness: "c.setActive($<a>)"
    setupValues:
      targetIP: "${customize.system.target.master}"
      mappings: "/amcl=acml,/laserscan_nodelet_manager=laserScanNodelet,/map_server=map_server,/ig_interpreter=ig_interpreter,/move_base=move_base,/mrpt_localization_node=mrpt,/aruco_marker_publisher_front=aruco_marker_publisher_front,/aruco_marker_publisher_back=aruco_marker_publisher_back,/marker_pose_publisher=marker_pose_publisher"
    configValues:
      reportinPeriod: 1000
      targetProbeType: rosnodeprobe

#  MSG1:
#    type: MissionStateGaugeT
#    model: RobotAndEnvironmentState:MissionState
#    commands:
#      location: "ms.setCurrentLocation($<x>,$<y>,$<w>)"
#      charge: "ms.setBatteryCharge($<c>)"
#      deadline: "ms.setDeadline($<d>)"
#    setupValues:
#      targetIP: "${customize.system.target.master}"
#    configValues:
#      reportingPeriod: 1000
#      targetProbeType: rostopicprobe
#      
#  TWG1:
#    type: BRASSTargetWaypointGaugeT
#    model: RobotAndEnvironmentState:MissionState
#    commands:
#      target: "ms.setTargetWaypoint($<w>)"
#    setupValues:
#      targetIP: "${customize.system.target.master}"
#    configValues:
#      reportingPeriod: 2000
#      targetProbeType: brasstargetprobe